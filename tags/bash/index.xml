<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on integralist</title>
    <link>http://www.integralist.co.uk/tags/bash/</link>
    <description>Recent content in Bash on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 12 Sep 2016 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terminal Debugging Utilities</title>
      <link>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</link>
      <pubDate>Mon, 12 Sep 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</guid>
      <description>Introduction Prerequisites  TCP and HTTP OSI Model  Utilities  top: check running processes for cpu and memory utilisation ps: see what processes are running strace: monitor interactions between processes lsof: list of open files netstat: monitoring network traffic ifconfig: configure or review your network interfaces iftop: monitors network traffic and displays table of bandwidth usage iptraf: monitoring network traffic (more visual than netstat, not as detailed) tcpdump: network packet sniffer wireshark: network packet sniffer and analyser (gui) tshark: network packet sniffer and analyser telnet: utility for communicating with another host  Honorable mentions Conclusion</description>
    </item>
    
    <item>
      <title>Bash Watchtower</title>
      <link>http://www.integralist.co.uk/posts/bash-watchtower/</link>
      <pubDate>Thu, 03 Mar 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bash-watchtower/</guid>
      <description>Introduction How does it work? Comparison Code Explanation Conclusion  
Introduction This is a quick post to demonstrate how I use a simple Bash shell script to report when web pages are failing (e.g. returning a non-200 HTTP status code). It does this by sending notifications of the URL which returned a non-200 status code into a remote application (in my case Slack; but you could modify the script to suit whatever service you happen to be using).</description>
    </item>
    
    <item>
      <title>Client Cert Authentication</title>
      <link>http://www.integralist.co.uk/posts/client-cert-authentication/</link>
      <pubDate>Sat, 03 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/client-cert-authentication/</guid>
      <description>Introduction Directory Structure Configuration Building Running Verifying Revocation References Conclusion  
Introduction The purpose of this post is to demonstrate how to configure nginx to use client certificates for authenticated access to your back-end service (in this example: a Ruby/Sinatra application).
 Note: the focus of this post isn&amp;rsquo;t about Ruby/Sinatra so don&amp;rsquo;t worry if your back-end service is built with another programming language
 I won&amp;rsquo;t be going into the details of how most of it was set-up, as the majority of this was already documented in a previous blog post here: Setting up nginx with Docker so I recommend reading through that first if you&amp;rsquo;re new to Docker and nginx.</description>
    </item>
    
    <item>
      <title>DNS 101</title>
      <link>http://www.integralist.co.uk/posts/dns-101/</link>
      <pubDate>Wed, 30 Sep 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/dns-101/</guid>
      <description>DNS (Domain Name System) Lookup Process  Resolver Root Name Server(s) TLD Name Server(s) SLD Name Server(s)  Tree Hierarchy DNS Structure Authority Zones Name Servers Commands  whois dig  Flags option: nostats option: nocomments option: trace Other options  host nslookup  Record Types  NS A CNAME MX SOA SRV PTR TXT  TTL (Time to Live)  Local Caching  References Conclusion</description>
    </item>
    
  </channel>
</rss>