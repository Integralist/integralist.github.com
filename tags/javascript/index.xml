<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on integralist</title>
    <link>http://www.integralist.co.uk/tags/javascript/</link>
    <description>Recent content in Javascript on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 26 Apr 2014 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional Recursive JavaScript Programming</title>
      <link>http://www.integralist.co.uk/posts/functional-recursive-javascript-programming/</link>
      <pubDate>Sat, 26 Apr 2014 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/functional-recursive-javascript-programming/</guid>
      <description>Introduction The problem Tail Call Optimisation The solution Trampolining A more advanced solution Explanation Conclusion  
Introduction This post isn&amp;rsquo;t about Functional Programming per se, as there are many parts to pure FP (seen in Lisp, Clojure, Haskell etc) which we can&amp;rsquo;t achieve completely in the JavaScript language (for example, implementing fundamental principles of FP such as &amp;ldquo;immutable data&amp;rdquo; is very difficult in a language designed around allowing data structures to be mutable.</description>
    </item>
    
    <item>
      <title>JavaScript 101</title>
      <link>http://www.integralist.co.uk/posts/javascript-101/</link>
      <pubDate>Sat, 24 Nov 2012 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/javascript-101/</guid>
      <description>Introduction What is JavaScript Terminology Global Object Variables Types Objects Arrays Conditional Statements Coercion Functions Code Reuse (inheritance) Conclusion  
Introduction I&amp;rsquo;ve written this very brief guide to JavaScript just as an aid for people new to the language and who need a basic starting point to see what the syntax looks like and to get a feeling for some of its features.
This article&amp;rsquo;s main purpose is to give readers new to the language a glimpse of the JavaScript environment and to hopefully spur them onto further reading/learning.</description>
    </item>
    
    <item>
      <title>Host Methods vs Native Methods</title>
      <link>http://www.integralist.co.uk/posts/host-methods-vs-native-methods/</link>
      <pubDate>Sun, 22 Apr 2012 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/host-methods-vs-native-methods/</guid>
      <description>Introduction What they are? How to detect them? When is it OK to modify them?  
Introduction This was intended as a short and overly simplified post about Host methods and Native methods.

What they are? Native methods are built-in functions provided by the ECMAScript core specification. So things like Object methods (e.g. Object.create), Array methods (e.g. Array#forEach) etc.
Host methods are functions provided by the host environment (most of the time when working in web development the host environment will be the userâ€™s web browser).</description>
    </item>
    
  </channel>
</rss>