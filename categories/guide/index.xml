<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guide on integralist</title>
    <link>http://www.integralist.co.uk/categories/guide/</link>
    <description>Recent content in Guide on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 28 Nov 2016 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/categories/guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concepts From the C Programming Language</title>
      <link>http://www.integralist.co.uk/posts/concepts-from-the-c-programming-language/</link>
      <pubDate>Mon, 28 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/concepts-from-the-c-programming-language/</guid>
      <description>Introduction Compilation  Compilers C11 safe functions  Hello World Constants vs Directives Quotations Char Type Null Terminator Pointers Arrays Enumerators Memory Allocation with different Types Reallocating Memory Function Prototypes Conclusion  
Introduction I decided recently to read a book on the C programming language. The idea was to learn some more low-level concepts that other higher-level languages were abstracting away from me.
This write up is the result of some of those learnings.</description>
    </item>
    
    <item>
      <title>Understanding Man Pages</title>
      <link>http://www.integralist.co.uk/posts/understanding-man-pages/</link>
      <pubDate>Fri, 25 Nov 2016 13:00:00 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/understanding-man-pages/</guid>
      <description>Introduction Sections Sub sections Accessing different sections  
Introduction Your operating system provides manual pages that explain what specific commands do and where they can be located on your computer.
Most of us are at least familiar with opening a terminal and typing:
man &amp;lt;some_command&amp;gt;  But you might be confused, when you see a manual page informing you to check out &amp;lt;another_command&amp;gt;(2). For example, you might be shown the message at the end of a man page that says See also: chmod(2).</description>
    </item>
    
    <item>
      <title>Syscalls and C</title>
      <link>http://www.integralist.co.uk/posts/syscalls-and-c/</link>
      <pubDate>Fri, 18 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/syscalls-and-c/</guid>
      <description>Syscalls and C This post is aimed at explaining the difference between a system call (provided by the Linux kernal) and a wrapper function that has a similar name within one of the C standard libraries.
I have no formal Computer Science (CS) background, I started programming in 1999 and only from 2016 am I starting to learn the C programming language in order to help give me a deeper knowledge of how *nix systems work and other core CS concepts.</description>
    </item>
    
    <item>
      <title>Bits and Bytes</title>
      <link>http://www.integralist.co.uk/posts/bits-and-bytes/</link>
      <pubDate>Wed, 16 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bits-and-bytes/</guid>
      <description>Introduction Bit Byte RAM Bit and RAM Visualisation Bits and Numbers IPs Base Numbers  Convert Base-10 into Base-2&amp;frasl;8 Convert Base-10 into Base-16 Convert Any Base to Base-10  CIDR Conclusion  
Introduction So this is a bit of a random journey through some different computer based subjects. Things that I felt I should try to better understand. Some of it will be very basic, but hopefully it&amp;rsquo;ll be useful to those who are new to tech, and are interested in learning these things (or old dogs like me who should know better).</description>
    </item>
    
    <item>
      <title>Terminal Password Manager</title>
      <link>http://www.integralist.co.uk/posts/terminal-password-manager/</link>
      <pubDate>Wed, 19 Oct 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-password-manager/</guid>
      <description>Introduction Installation Example Usage Exporting Data Synchronisation Mobile and GUI Applications MultiFactor Authentication Conclusion  
Introduction I&amp;rsquo;m guessing that you have an app like 1Password or KeePassX to manage your passwords and other login credentials and you&amp;rsquo;re now looking for a cheaper alternative, and also one that doesn&amp;rsquo;t rely on a GUI (although as you&amp;rsquo;ll see that&amp;rsquo;s still possible).
If so, then &amp;ldquo;Pass&amp;rdquo; might be something of interest to you as it offers you the ability to securely store information via the command line interface (e.</description>
    </item>
    
    <item>
      <title>Terminal Debugging Utilities</title>
      <link>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</link>
      <pubDate>Mon, 12 Sep 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</guid>
      <description>Introduction Prerequisites  TCP and HTTP OSI Model  Utilities  top: check running processes for cpu and memory utilisation ps: see what processes are running strace: monitor interactions between processes lsof: list of open files netstat: monitoring network traffic ifconfig: configure or review your network interfaces iftop: monitors network traffic and displays table of bandwidth usage iptraf: monitoring network traffic (more visual than netstat, not as detailed) tcpdump: network packet sniffer wireshark: network packet sniffer and analyser (gui) tshark: network packet sniffer and analyser telnet: utility for communicating with another host  Honorable mentions Conclusion</description>
    </item>
    
    <item>
      <title>GitHub Pull Request Formatting</title>
      <link>http://www.integralist.co.uk/posts/github-pull-request-formatting/</link>
      <pubDate>Mon, 22 Aug 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/github-pull-request-formatting/</guid>
      <description>Introduction Why Size Process Communication Merge Strategies Conclusion  
Introduction What makes a good Pull Request?
The answer will depend on your team, and to a certain extent your organisation.
Currently I work at BuzzFeed, and prior to that I worked at the BBC.
Both have a large number of engineers and teams, but due to different organisational structures they have differing opinions on what constitutes a good pull request format.</description>
    </item>
    
    <item>
      <title>Big O for Beginners</title>
      <link>http://www.integralist.co.uk/posts/big-o-for-beginners/</link>
      <pubDate>Tue, 28 Jun 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/big-o-for-beginners/</guid>
      <description>Introduction Understanding Big O  Logarithms Logarithm Example Factorials  Back to Big O Simple Search Binary Search The Travelling Salesperson Calculating Operation Speed Arrays vs Linked Lists Selection Sort Quick Sort Conclusion References  
Introduction When you first start learning algorithms (Binary Search, Quick Sort, Breadth-first Search etc), you&amp;rsquo;ll quickly realise that in order to take advantage of these algorithms, you need to know how fast they are.</description>
    </item>
    
    <item>
      <title>Git Merge Strategies</title>
      <link>http://www.integralist.co.uk/posts/git-merge-strategies/</link>
      <pubDate>Sun, 15 May 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/git-merge-strategies/</guid>
      <description>Introduction git merge git merge --no-ff --edit  git reset Force the merge commit git branch --contains Losing useful history  git merge --squash git rebase git rebase --interactive git rebase --onto git format-patch Conclusion  
Introduction Imagine I have a master branch with one commit:
75eb1cb - (origin/master) README  This is a single README.md file with the following content:
- A: 1  Now imagine I have a branch from master called feat/foo and in that branch I&amp;rsquo;ve made 3 additional commits:</description>
    </item>
    
    <item>
      <title>gRPC for Beginners</title>
      <link>http://www.integralist.co.uk/posts/grpc-for-beginners/</link>
      <pubDate>Mon, 11 Apr 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/grpc-for-beginners/</guid>
      <description>Introduction Install gRPC Install Proto Buffer Compiler Hello World Proto Definition Ruby Example Go Example Conclusion  
Introduction I started designing a new microservice that I wanted to write in Go. The service was to be a JSON RPC service over TCP, and the expected consumer servicer I would build using Ruby.
I had some initial concerns regarding the nature of TCP sockets with a highly scalable and distrubuted set of services (this was to be utilised within the BBC so these are genuine concerns to be had for my purposes) and so I decided to do some research.</description>
    </item>
    
    <item>
      <title>Bash Watchtower</title>
      <link>http://www.integralist.co.uk/posts/bash-watchtower/</link>
      <pubDate>Thu, 03 Mar 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bash-watchtower/</guid>
      <description>Introduction How does it work? Comparison Code Explanation Conclusion  
Introduction This is a quick post to demonstrate how I use a simple Bash shell script to report when web pages are failing (e.g. returning a non-200 HTTP status code). It does this by sending notifications of the URL which returned a non-200 status code into a remote application (in my case Slack; but you could modify the script to suit whatever service you happen to be using).</description>
    </item>
    
    <item>
      <title>RPC Variations in Go</title>
      <link>http://www.integralist.co.uk/posts/rpc-variations-in-go/</link>
      <pubDate>Fri, 19 Feb 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/rpc-variations-in-go/</guid>
      <description>Introduction  Outline Variations Requirements  RPC over HTTP RPC over TCP JSON Calling from Ruby gRPC  
Introduction Let&amp;rsquo;s begin by understanding what an RPC (Remote Procedure Call) actually is:
 RPC is a way of connecting two separate services via a raw TCP socket
 
Outline The fundamental principle behind RPC is to create a service that exposes a function behind that service.
The steps typically look something like:</description>
    </item>
    
    <item>
      <title>Understanding Golang&#39;s Func Type</title>
      <link>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</link>
      <pubDate>Mon, 23 Nov 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</guid>
      <description>Introduction Four ways to skin a cat How does the adapter work? Why is this interesting?  
Introduction Here is some code that demonstrates the typical &amp;lsquo;hello world&amp;rsquo; for a Go based web server:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello %s&amp;quot;, r.URL.Path[1:]) } func main() { http.HandleFunc(&amp;quot;/World&amp;quot;, handler) http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil) }   Note: http://localhost:8080/World will return Hello World</description>
    </item>
    
    <item>
      <title>HTTP/2</title>
      <link>http://www.integralist.co.uk/posts/http2/</link>
      <pubDate>Tue, 20 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/http2/</guid>
      <description>Introduction Persistent Connections Multiplexing Compression Prioritization SSL/TLS Server Push Implementations  Nginx Go  References  
Introduction This is a super quick post for demonstrating how to utilise the new HTTP/2 protocol. If you&amp;rsquo;re unfamiliar with it, then let me spend a brief few moments discussing some of the highlights:
 Single, persistent connection Multiplexing Header compression Prioritization Encryption Server Push  If none of these features make sense, then allow me to clarify further&amp;hellip;</description>
    </item>
    
    <item>
      <title>Client Cert Authentication</title>
      <link>http://www.integralist.co.uk/posts/client-cert-authentication/</link>
      <pubDate>Sat, 03 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/client-cert-authentication/</guid>
      <description>Introduction Directory Structure Configuration Building Running Verifying Revocation References Conclusion  
Introduction The purpose of this post is to demonstrate how to configure nginx to use client certificates for authenticated access to your back-end service (in this example: a Ruby/Sinatra application).
 Note: the focus of this post isn&amp;rsquo;t about Ruby/Sinatra so don&amp;rsquo;t worry if your back-end service is built with another programming language
 I won&amp;rsquo;t be going into the details of how most of it was set-up, as the majority of this was already documented in a previous blog post here: Setting up nginx with Docker so I recommend reading through that first if you&amp;rsquo;re new to Docker and nginx.</description>
    </item>
    
    <item>
      <title>DNS 101</title>
      <link>http://www.integralist.co.uk/posts/dns-101/</link>
      <pubDate>Wed, 30 Sep 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/dns-101/</guid>
      <description>DNS (Domain Name System) Lookup Process  Resolver Root Name Server(s) TLD Name Server(s) SLD Name Server(s)  Tree Hierarchy DNS Structure Authority Zones Name Servers Commands  whois dig  Flags option: nostats option: nocomments option: trace Other options  host nslookup  Record Types  NS A CNAME MX SOA SRV PTR TXT  TTL (Time to Live)  Local Caching  References Conclusion</description>
    </item>
    
  </channel>
</rss>