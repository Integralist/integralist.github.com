<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monitoring on integralist</title>
    <link>http://www.integralist.co.uk/tags/monitoring/</link>
    <description>Recent content in Monitoring on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 19 Dec 2017 09:32:54 +0000</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/tags/monitoring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Statistics and Graphs: The Basics</title>
      <link>http://www.integralist.co.uk/posts/statistic-basics/</link>
      <pubDate>Tue, 19 Dec 2017 09:32:54 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/statistic-basics/</guid>
      <description>Introduction Information vs Data Watch out for misleading data Frequency Pie Chart Bar Chart  Stacked Split  Histograms  Differences? Calculating dimensions Frequency Density?  Line Graphs Averages Which average to use? Ranges Percentiles Variance Conclusion  
Introduction I started learning about statistics because I found myself doing a lot of operational monitoring (i.e. making systems more observable, instrumenting individual services, and monitoring that data via custom built dashboards).</description>
    </item>
    
    <item>
      <title>Observability and Monitoring Best Practices</title>
      <link>http://www.integralist.co.uk/posts/monitoring-best-practices/</link>
      <pubDate>Wed, 15 Nov 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/monitoring-best-practices/</guid>
      <description>This post aims to discuss key monitoring discussion points and to summarise the relevant best practices when instrumenting application performance monitoring.
Below are some of the areas we&amp;rsquo;ll be focusing in on&amp;hellip;
 Terminology. Understand the different types of monitoring.  Data collection methods. Frontend monitoring.  Make it useful, then actionable. Focus on user impact. Favour organic changes over static thresholds. Send critical and noncritical alarms to different channels.</description>
    </item>
    
    <item>
      <title>Bash Watchtower</title>
      <link>http://www.integralist.co.uk/posts/bash-watchtower/</link>
      <pubDate>Thu, 03 Mar 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bash-watchtower/</guid>
      <description>Introduction How does it work? Comparison Code Explanation Conclusion  
Introduction This is a quick post to demonstrate how I use a simple Bash shell script to report when web pages are failing (e.g. returning a non-200 HTTP status code). It does this by sending notifications of the URL which returned a non-200 status code into a remote application (in my case Slack; but you could modify the script to suit whatever service you happen to be using).</description>
    </item>
    
  </channel>
</rss>