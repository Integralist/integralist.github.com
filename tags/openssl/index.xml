<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openssl on integralist</title>
    <link>http://www.integralist.co.uk/tags/openssl/</link>
    <description>Recent content in Openssl on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 16 Feb 2018 08:33:40 +0000</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/tags/openssl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hashing, Encryption and Encoding</title>
      <link>http://www.integralist.co.uk/posts/hashing-and-encryption/</link>
      <pubDate>Fri, 16 Feb 2018 08:33:40 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/hashing-and-encryption/</guid>
      <description>Introduction I&amp;rsquo;ve written previously (and in-depth) on the subject of security basics, using tools such as GPG, OpenSSH, OpenSSL, and Keybase. But this time I wanted to focus in on the differences between encryption and hashing, whilst also providing a slightly more concise reference point for those already familiar with these concepts.
Before we get started, let&amp;rsquo;s see what we&amp;rsquo;ll be covering:
 Terminology Hashing vs Encryption MAC vs HMAC Base64 Encoding Random Password Generation Hash Functions  shasum hashlib cksum  OpenSSH OpenSSL  Generating a key pair Encrypting and Decrypting Randomness  GPG  Generating a key pair Automate Asymmetrical Encryption and Decryption Symmetrical Encryption and Decryption Signing keys Signing encrypted files  Keybase</description>
    </item>
    
    <item>
      <title>Client Cert Authentication</title>
      <link>http://www.integralist.co.uk/posts/client-cert-authentication/</link>
      <pubDate>Sat, 03 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/client-cert-authentication/</guid>
      <description>Introduction Directory Structure Configuration Building Running Verifying Revocation References Conclusion  
Introduction The purpose of this post is to demonstrate how to configure nginx to use client certificates for authenticated access to your back-end service (in this example: a Ruby/Sinatra application).
 Note: the focus of this post isn&amp;rsquo;t about Ruby/Sinatra so don&amp;rsquo;t worry if your back-end service is built with another programming language
 I won&amp;rsquo;t be going into the details of how most of it was set-up, as the majority of this was already documented in a previous blog post here: Setting up nginx with Docker so I recommend reading through that first if you&amp;rsquo;re new to Docker and nginx.</description>
    </item>
    
    <item>
      <title>Security basics with GPG, OpenSSH, OpenSSL and Keybase</title>
      <link>http://www.integralist.co.uk/posts/security-basics/</link>
      <pubDate>Tue, 25 Aug 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/security-basics/</guid>
      <description>Introduction What are keys and how do they work? Understanding PKI OpenSSL vs OpenSSH What is GPG? Creating your own keys  OpenSSH OpenSSL GPG  Multiple Keys?   How to encrypt data using GPG, OpenSSL and Keybase  GPG encryption  Asymmetrical encryption Symmetrical encryption Key Signing Digital Signatures Revoking Keys  OpenSSL encryption Keybase Which should I use?  Creating, self-signing, issuing and revoking certificates Conclusion   UPDATE: for those short on time, read the following Introduction, What are keys and how do they work?</description>
    </item>
    
  </channel>
</rss>