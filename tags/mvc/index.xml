<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mvc on integralist</title>
    <link>http://www.integralist.co.uk/tags/mvc/</link>
    <description>Recent content in Mvc on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 22 Oct 2013 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/tags/mvc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MVCP: Model, View, Controller, Presenter</title>
      <link>http://www.integralist.co.uk/posts/mvcp/</link>
      <pubDate>Tue, 22 Oct 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/mvcp/</guid>
      <description>Introduction  Model View Controller  Mixed definitions  God Controller Problems Skinny Controller  Presenters?  What problem are Presenters trying to solve? How do they work?  Code Example  Controller View Presenter  Conclusion  
Introduction Model, View, Controller (MVC). This is a pretty standard architectural pattern and has been in use when developing software since the early 1970&amp;rsquo;s.
The basic principle of the pattern is to separate the different areas of logic from your application into distinct compartments.</description>
    </item>
    
  </channel>
</rss>