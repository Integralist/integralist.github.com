<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on integralist</title>
    <link>http://www.integralist.co.uk/tags/golang/</link>
    <description>Recent content in Golang on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 02 Dec 2016 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hitchikers Guide to Go</title>
      <link>http://www.integralist.co.uk/posts/hitchikers-guide-to-go/</link>
      <pubDate>Fri, 02 Dec 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/hitchikers-guide-to-go/</guid>
      <description>Introduction Private Repo Access Build and Compilation Dependency Information Dependency Management Documentation Testing Logging Godo Import Race Conditions New vs Make Custom Types Function Types Enumerator IOTA Struct: Var vs Type Embedded Structs Reference vs Value See all methods on &amp;lt;Type&amp;gt; Convert Struct into JSON Pretty Printing JSON String Convert Struct into YAML Sorting Structs Read Users Input HTTP Middleware Sessions HTTPS TLS Request HTTP GET Web Page Custom HTTP Request Methods Pointers Type Assertion Line Counting Reading File in Chunks Time Starting and Stopping things with Channels Channel Pipelines Templating Error handling Socket Programming Comparing Maps Zip File Contents Shell Commands New Instance Idiom JSON Connection Draining</description>
    </item>
    
    <item>
      <title>gRPC for Beginners</title>
      <link>http://www.integralist.co.uk/posts/grpc-for-beginners/</link>
      <pubDate>Mon, 11 Apr 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/grpc-for-beginners/</guid>
      <description>Introduction Install gRPC Install Proto Buffer Compiler Hello World Proto Definition Ruby Example Go Example Conclusion  
Introduction I started designing a new microservice that I wanted to write in Go. The service was to be a JSON RPC service over TCP, and the expected consumer servicer I would build using Ruby.
I had some initial concerns regarding the nature of TCP sockets with a highly scalable and distrubuted set of services (this was to be utilised within the BBC so these are genuine concerns to be had for my purposes) and so I decided to do some research.</description>
    </item>
    
    <item>
      <title>RPC Variations in Go</title>
      <link>http://www.integralist.co.uk/posts/rpc-variations-in-go/</link>
      <pubDate>Fri, 19 Feb 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/rpc-variations-in-go/</guid>
      <description>Introduction  Outline Variations Requirements  RPC over HTTP RPC over TCP JSON Calling from Ruby gRPC  
Introduction Let&amp;rsquo;s begin by understanding what an RPC (Remote Procedure Call) actually is:
 RPC is a way of connecting two separate services via a raw TCP socket
 
Outline The fundamental principle behind RPC is to create a service that exposes a function behind that service.
The steps typically look something like:</description>
    </item>
    
    <item>
      <title>Understanding Golang&#39;s Func Type</title>
      <link>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</link>
      <pubDate>Mon, 23 Nov 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</guid>
      <description>Introduction Four ways to skin a cat How does the adapter work? Why is this interesting?  
Introduction Here is some code that demonstrates the typical &amp;lsquo;hello world&amp;rsquo; for a Go based web server:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello %s&amp;quot;, r.URL.Path[1:]) } func main() { http.HandleFunc(&amp;quot;/World&amp;quot;, handler) http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil) }   Note: http://localhost:8080/World will return Hello World</description>
    </item>
    
  </channel>
</rss>