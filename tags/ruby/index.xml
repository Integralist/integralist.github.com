<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on integralist</title>
    <link>http://www.integralist.co.uk/tags/ruby/</link>
    <description>Recent content in Ruby on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 04 Aug 2015 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting Up Nginx With Docker</title>
      <link>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</link>
      <pubDate>Tue, 04 Aug 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</guid>
      <description>Introduction Just give me the code Setting up nginx Setting up the Ruby application Linking your app to nginx Conclusion  
Introduction I wanted to learn about how to use the popular proxy server nginx for handling &amp;ldquo;reverse proxy&amp;rdquo; duties on a Ruby project I was working on. So I decided the easiest thing to do in order to play around with nginx (as I work on a MacBook Pro laptop), would be to install and run it (and my back-end application) within Docker containers.</description>
    </item>
    
    <item>
      <title>MVCP: Model, View, Controller, Presenter</title>
      <link>http://www.integralist.co.uk/posts/mvcp/</link>
      <pubDate>Tue, 22 Oct 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/mvcp/</guid>
      <description>Introduction  Model View Controller  Mixed definitions  God Controller Problems Skinny Controller  Presenters?  What problem are Presenters trying to solve? How do they work?  Code Example  Controller View Presenter  Conclusion  
Introduction Model, View, Controller (MVC). This is a pretty standard architectural pattern and has been in use when developing software since the early 1970&amp;rsquo;s.
The basic principle of the pattern is to separate the different areas of logic from your application into distinct compartments.</description>
    </item>
    
    <item>
      <title>Message Passing in Object Oriented Code</title>
      <link>http://www.integralist.co.uk/posts/message-passing-in-object-oriented-code/</link>
      <pubDate>Sun, 31 Mar 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/message-passing-in-object-oriented-code/</guid>
      <description>Introduction Quick example The Proxy Design Pattern How Ruby handles method calls Implementing method_missing Conclusion  
Introduction In my previous post I quoted the following description of object-oriented designâ€¦
 Object-Oriented Design is about the messages that get sent between objects and not the objects themselves.
 The reason I felt this quote was important for good code design was because it helped focus our attention on improving our object&amp;rsquo;s interfaces.</description>
    </item>
    
  </channel>
</rss>