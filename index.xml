<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on integralist</title>
    <link>http://www.integralist.co.uk/</link>
    <description>Recent content in Home on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 30 Jan 2018 09:29:10 +0000</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://www.integralist.co.uk/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/about/</guid>
      <description>Hello, my name is Mark and I work @BuzzFeed as a Senior Software Engineer (formerly Principal Engineer @BBCNews).
 keybase.io/integralist
 I&amp;rsquo;m a published author of five books (three through Apress and two self-published via Leanpub):
 Pro Vim Tmux Taster Quick Clojure: Effective Functional Programming Programming in Clojure Python for Programmers  For more details on my work history, please refer to my resume</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>http://www.integralist.co.uk/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/resume/</guid>
      <description>Hello! Connect History Key Achievements Tools, Languages and Tech Talks Published Popular articles Open-Source Summary  Hello! Hello, my name is Mark and I work @BuzzFeed as a Senior Software Engineer (formerly Principal Engineer @BBCNews).
I&amp;rsquo;m also a published author with Apress and LeanPub:
Apress  Pro Vim Tmux Taster Quick Clojure: Effective Functional Programming  LeanPub  Python for Programmers Programming in Clojure  Connect You can find me online at the following locations:</description>
    </item>
    
    <item>
      <title>Computers 101: terminals, kernels and shells</title>
      <link>http://www.integralist.co.uk/posts/terminal-shell/</link>
      <pubDate>Tue, 30 Jan 2018 09:29:10 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-shell/</guid>
      <description>Terminal Kernal Shell Shell Builtins Executables Documentation Explicit Requests Locating programs Hashed Types List of all builtins vs executables  
Terminal A terminal is an input/output device.
Traditionally terminals would have been a real hardware device that you used to interact with a computer.
In modern computing we have electronic terminals.
Also known as a &amp;lsquo;terminal emulator&amp;rsquo;.
If don&amp;rsquo;t want to use a GUI (graphical user interface) to interact with your computer, you can use a terminal emulator.</description>
    </item>
    
    <item>
      <title>Statistics and Graphs: The Basics</title>
      <link>http://www.integralist.co.uk/posts/statistic-basics/</link>
      <pubDate>Tue, 19 Dec 2017 09:32:54 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/statistic-basics/</guid>
      <description>Introduction Information vs Data Frequency Watch out for misleading data Pie Chart Bar Chart  Stacked Bars Split Bars  Histograms  Differences? Calculating dimensions Frequency Density?  Line Graphs Averages Which average to use? Ranges Percentiles Variance Conclusion  
Introduction I started learning about statistics because I found myself doing a lot of operational monitoring (i.e. making systems more observable, instrumenting individual services, and monitoring that data via custom built dashboards).</description>
    </item>
    
    <item>
      <title>NSQ Queue Reader Best Practices</title>
      <link>http://www.integralist.co.uk/posts/queue-reader-best-practices/</link>
      <pubDate>Sun, 26 Nov 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/queue-reader-best-practices/</guid>
      <description>Introduction Ephemeral Channels? Fail quickly Verify your message handling logic Be wary of global variables Instrument timers around your primary message handler Pynsq doesn’t support coroutines Prevent messages backing up in the queue Avoid API libraries auto-retrying expensive operations Place blocking IO operations into a thread pool Rate limit yourself Disable yourself Drop or Requeue?  
Introduction This post should serve as a guide for best practices when dealing with services that consume messages from queues and process those messages (we refer to them as QRs or &amp;lsquo;Queue Readers&amp;rsquo;).</description>
    </item>
    
    <item>
      <title>Observability and Monitoring Best Practices</title>
      <link>http://www.integralist.co.uk/posts/monitoring-best-practices/</link>
      <pubDate>Wed, 15 Nov 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/monitoring-best-practices/</guid>
      <description>This post aims to discuss key monitoring discussion points and to summarise the relevant best practices when instrumenting application performance monitoring.
Below are some of the areas we&amp;rsquo;ll be focusing in on&amp;hellip;
 Terminology. Understand the different types of monitoring.  Data collection methods. Frontend monitoring.  Make it useful, then actionable. Focus on user impact. Favour organic changes over static thresholds. Send critical and noncritical alarms to different channels.</description>
    </item>
    
    <item>
      <title>Load Testing Guidelines</title>
      <link>http://www.integralist.co.uk/posts/load-testing-guidelines/</link>
      <pubDate>Mon, 13 Nov 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/load-testing-guidelines/</guid>
      <description>Introduction Use real datasets Identify collateral damage Stub services if necessary Distribute your traffic Automate for reproducible runs Consider disabling authentication Don&amp;rsquo;t immediately scale dependencies Send traffic from different geographical regions Decide if your tool should support reusing connections Start testing a single instance, before moving onto clusters Verify load using multiple strategies Reset your environment between test runs Document the results Tools  
Introduction This post should serve as a guideline for running load tests.</description>
    </item>
    
    <item>
      <title>Logging 101</title>
      <link>http://www.integralist.co.uk/posts/logging-101/</link>
      <pubDate>Sun, 12 Nov 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/logging-101/</guid>
      <description>Logs? Levels Quality  
Logs? Applications should record information/events to help make debugging (and understanding) what a program is doing easier.
Typically this information is recorded into a log file.
But in some cases it is preferred to send this information to stdout because it then becomes the responsibility of the operating system/environment to determine where and how those logs are stored.
To quote 12factor:
 A (service) never concerns itself with routing or storage of its output stream.</description>
    </item>
    
    <item>
      <title>Fastly Varnish</title>
      <link>http://www.integralist.co.uk/posts/fastly-varnish/</link>
      <pubDate>Thu, 02 Nov 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/fastly-varnish/</guid>
      <description>Introduction Varnish Default VCL Fastly Custom VCL Fastly Request Flow Diagram State Variables Persisting State Hit for Pass Serving Stale Logging Conclusion  
Introduction Varnish is an open-source HTTP accelerator.
More concretely it is a web application that acts like a HTTP reverse-proxy.
You place Varnish in front of your application servers (those that are serving HTTP content) and it will cache that content for you. If you want more information on what Varnish cache can do for you, then I recommend reading through their introduction article (and watching the video linked there as well).</description>
    </item>
    
    <item>
      <title>Profiling Go</title>
      <link>http://www.integralist.co.uk/posts/profiling-go/</link>
      <pubDate>Tue, 31 Oct 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/profiling-go/</guid>
      <description>Memory Management Types of Profiling Tools Matrix Analysis Steps Base Example ReadMemStats Pprof Trace Conclusion  
Memory Management Before we dive into the techniques and tools available for profiling Go applications, we should first understand a little bit about its memory model as this can help us to understand what it is we’re seeing in relation to memory consumption.
Go’s implementation is a parallel mark-and-sweep garbage collector. In the traditional mark-and-sweep model, the garbage collector would stop the program from running (i.</description>
    </item>
    
    <item>
      <title>Profiling Python</title>
      <link>http://www.integralist.co.uk/posts/profiling-python/</link>
      <pubDate>Tue, 31 Oct 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/profiling-python/</guid>
      <description>Memory Management Types of Profiling Tools Matrix Analysis Steps Base Example Timer Built-in module: timeit Built-in module: profiler Line Profiler Basic Memory Profiler Tracemalloc PyFlame (Flame Graphs) Conclusion  
Memory Management Before we dive into the techniques and tools available for profiling Python applications, we should first understand a little bit about its memory model as this can help us to understand what it is we’re seeing in relation to memory consumption.</description>
    </item>
    
    <item>
      <title>Dev Environments Within Docker Containers</title>
      <link>http://www.integralist.co.uk/posts/dev-environments-within-docker-containers/</link>
      <pubDate>Wed, 29 Mar 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/dev-environments-within-docker-containers/</guid>
      <description>Introduction Python Go Mounting Volumes  
Introduction You&amp;rsquo;re a software engineer with a new laptop.
You&amp;rsquo;re going to be writing code in multiple languages.
You&amp;rsquo;re going to have projects of varying dependencies.
But you want to avoid the issues you&amp;rsquo;ve had in the past:
 Messy installations of lots of different software packages. Clogging up your system with programming language version managers.  You decide to use Docker.</description>
    </item>
    
    <item>
      <title>Key Architecture</title>
      <link>http://www.integralist.co.uk/posts/key-architecture/</link>
      <pubDate>Sat, 10 Dec 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/key-architecture/</guid>
      <description>Introduction Visual Breakdown Vulnerabilities? Conclusion  
Introduction Just a quick post to cover the key architecture I&amp;rsquo;m using currently. I&amp;rsquo;m very interested to know how others are doing things in the hope that I can improve the security of my setup.
 Note: I&amp;rsquo;m not a security paranoia nut, so I&amp;rsquo;m not looking for the most concrete solution. But definitely want to be sure I&amp;rsquo;m not missing anything obvious either</description>
    </item>
    
    <item>
      <title>Hitchikers Guide to Go</title>
      <link>http://www.integralist.co.uk/posts/hitchikers-guide-to-go/</link>
      <pubDate>Fri, 02 Dec 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/hitchikers-guide-to-go/</guid>
      <description>Introduction Private Repo Access Build and Compilation Dependency Information Dependency Management Documentation Testing Logging Godo Import Race Conditions New vs Make Custom Types Function Types Enumerator IOTA Struct: Var vs Type Embedded Structs Reference vs Value See all methods on &amp;lt;Type&amp;gt; Convert Struct into JSON Pretty Printing JSON String Convert Struct into YAML Sorting Structs Read Users Input HTTP Middleware Sessions HTTPS TLS Request HTTP GET Web Page Custom HTTP Request Methods Pointers Type Assertion Line Counting Reading File in Chunks Time Starting and Stopping things with Channels Channel Pipelines Templating Error handling Socket Programming Comparing Maps Zip File Contents Shell Commands New Instance Idiom JSON Connection Draining Writing your own Marshal/Unmarshal functions</description>
    </item>
    
    <item>
      <title>Concepts From the C Programming Language</title>
      <link>http://www.integralist.co.uk/posts/concepts-from-the-c-programming-language/</link>
      <pubDate>Mon, 28 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/concepts-from-the-c-programming-language/</guid>
      <description>Introduction Compilation  Compilers C11 safe functions  Hello World Constants vs Directives Quotations Char Type Null Terminator Pointers Arrays Enumerators Memory Allocation with different Types Reallocating Memory Function Prototypes Conclusion  
Introduction I decided recently to read a book on the C programming language. The idea was to learn some more low-level concepts that other higher-level languages were abstracting away from me.
This write up is the result of some of those learnings.</description>
    </item>
    
    <item>
      <title>Understanding Man Pages</title>
      <link>http://www.integralist.co.uk/posts/understanding-man-pages/</link>
      <pubDate>Fri, 25 Nov 2016 13:00:00 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/understanding-man-pages/</guid>
      <description>Introduction Sections Sub sections Accessing different sections  
Introduction Your operating system provides manual pages that explain what specific commands do and where they can be located on your computer.
Most of us are at least familiar with opening a terminal and typing:
man &amp;lt;some_command&amp;gt;  But you might be confused, when you see a manual page informing you to check out &amp;lt;another_command&amp;gt;(2). For example, you might be shown the message at the end of a man page that says See also: chmod(2).</description>
    </item>
    
    <item>
      <title>Syscalls and C</title>
      <link>http://www.integralist.co.uk/posts/syscalls-and-c/</link>
      <pubDate>Fri, 18 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/syscalls-and-c/</guid>
      <description>Syscalls and C This post is aimed at explaining the difference between a system call (provided by the Linux kernal) and a wrapper function that has a similar name within one of the C standard libraries.
I have no formal Computer Science (CS) background, I started programming in 1999 and only from 2016 am I starting to learn the C programming language in order to help give me a deeper knowledge of how *nix systems work and other core CS concepts.</description>
    </item>
    
    <item>
      <title>Bits and Bytes</title>
      <link>http://www.integralist.co.uk/posts/bits-and-bytes/</link>
      <pubDate>Wed, 16 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bits-and-bytes/</guid>
      <description>Introduction Bit Byte RAM Bit and RAM Visualisation Bits and Numbers IPs Base Numbers  Convert Base-10 into Base-2&amp;frasl;8 Convert Base-10 into Base-16 Convert Any Base to Base-10  CIDR Conclusion  
Introduction So this is a bit of a random journey through some different computer based subjects. Things that I felt I should try to better understand. Some of it will be very basic, but hopefully it&amp;rsquo;ll be useful to those who are new to tech, and are interested in learning these things (or old dogs like me who should know better).</description>
    </item>
    
    <item>
      <title>Terminal Password Manager</title>
      <link>http://www.integralist.co.uk/posts/terminal-password-manager/</link>
      <pubDate>Wed, 19 Oct 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-password-manager/</guid>
      <description>Introduction Installation Example Usage Exporting Data Synchronisation Mobile and GUI Applications MultiFactor Authentication Conclusion  
Introduction I&amp;rsquo;m guessing that you have an app like 1Password or KeePassX to manage your passwords and other login credentials and you&amp;rsquo;re now looking for a cheaper alternative, and also one that doesn&amp;rsquo;t rely on a GUI (although as you&amp;rsquo;ll see that&amp;rsquo;s still possible).
If so, then &amp;ldquo;Pass&amp;rdquo; might be something of interest to you as it offers you the ability to securely store information via the command line interface (e.</description>
    </item>
    
    <item>
      <title>Terminal Debugging Utilities</title>
      <link>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</link>
      <pubDate>Mon, 12 Sep 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</guid>
      <description>Introduction Prerequisites  TCP and HTTP OSI Model  Utilities  top: check running processes for cpu and memory utilisation ps: see what processes are running strace: monitor interactions between processes lsof: list of open files netstat: monitoring network traffic ifconfig: configure or review your network interfaces iftop: monitors network traffic and displays table of bandwidth usage iptraf: monitoring network traffic (more visual than netstat, not as detailed) tcpdump: network packet sniffer wireshark: network packet sniffer and analyser (gui) tshark: network packet sniffer and analyser telnet: utility for communicating with another host  Honorable mentions Conclusion</description>
    </item>
    
    <item>
      <title>GitHub Pull Request Formatting</title>
      <link>http://www.integralist.co.uk/posts/github-pull-request-formatting/</link>
      <pubDate>Mon, 22 Aug 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/github-pull-request-formatting/</guid>
      <description>Introduction Why Size Process Communication Merge Strategies Conclusion  
Introduction What makes a good Pull Request?
The answer will depend on your team, and to a certain extent your organisation.
Currently I work at BuzzFeed, and prior to that I worked at the BBC.
Both have a large number of engineers and teams, but due to different organisational structures they have differing opinions on what constitutes a good pull request format.</description>
    </item>
    
    <item>
      <title>Big O for Beginners</title>
      <link>http://www.integralist.co.uk/posts/big-o-for-beginners/</link>
      <pubDate>Tue, 28 Jun 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/big-o-for-beginners/</guid>
      <description>Introduction Understanding Big O  Logarithms Logarithm Example Factorials  Back to Big O Simple Search Binary Search The Travelling Salesperson Calculating Operation Speed Arrays vs Linked Lists Selection Sort Quick Sort Conclusion References  
Introduction When you first start learning algorithms (Binary Search, Quick Sort, Breadth-first Search etc), you&amp;rsquo;ll quickly realise that in order to take advantage of these algorithms, you need to know how fast they are.</description>
    </item>
    
    <item>
      <title>The Perfect Developer Qualities</title>
      <link>http://www.integralist.co.uk/posts/the-perfect-developer-qualities/</link>
      <pubDate>Fri, 27 May 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/the-perfect-developer-qualities/</guid>
      <description>For me the perfect developer (if there is such a person) has these qualities:
 Friendly: is respected and liked by all they work with and are always approachable (even in times of stress) Humble: has great humilty and is not driven by ego Calm: doesn&amp;rsquo;t get emotive within discussions (including discussions that are both in their favour and those that aren&amp;rsquo;t) Understanding: appreciates that business requirements do change regularly and that there are no perfect scenarios; so is able to adapt to problematic situations in the appropriate manner Agile: recognises when they are potentially moving down a rabbit hole/time sink/yak shave and will successfully re-evaluate the situation and refocus their attention Patient: appreciates that no dev is born equal and so varying soft/practical skills will be encountered Experienced: has a wide ranging skill set with relevant practical experience and most importantly realises the fundamentals of simple code design and recognised patterns Consistent: by being consistent in their development approach they faciliate easier rotation of developers when resources are restricted/restructured Wise: knows when and where a particular technology is appropriate to use (and when not appropriate) Analytical: is pragmatic and can break down complex problems into logical smaller tasks Articulate: able to communicate clearly their ideas to people of all technical levels Open: continuous documentation and visibility into design and development progress; ensuring good communication Reasonable: understands a problem&amp;rsquo;s sense of proportion; what&amp;rsquo;s important and what isn&amp;rsquo;t (e.</description>
    </item>
    
    <item>
      <title>Git Merge Strategies</title>
      <link>http://www.integralist.co.uk/posts/git-merge-strategies/</link>
      <pubDate>Sun, 15 May 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/git-merge-strategies/</guid>
      <description>Introduction git merge git merge --no-ff --edit  git reset Force the merge commit git branch --contains Losing useful history  git merge --squash git rebase git rebase --interactive git rebase --onto git format-patch Conclusion  
Introduction Imagine I have a master branch with one commit:
75eb1cb - (origin/master) README  This is a single README.md file with the following content:
- A: 1  Now imagine I have a branch from master called feat/foo and in that branch I&amp;rsquo;ve made 3 additional commits:</description>
    </item>
    
    <item>
      <title>gRPC for Beginners</title>
      <link>http://www.integralist.co.uk/posts/grpc-for-beginners/</link>
      <pubDate>Mon, 11 Apr 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/grpc-for-beginners/</guid>
      <description>Introduction Install gRPC Install Proto Buffer Compiler Hello World Proto Definition Ruby Example Go Example Conclusion  
Introduction I started designing a new microservice that I wanted to write in Go. The service was to be a JSON RPC service over TCP, and the expected consumer servicer I would build using Ruby.
I had some initial concerns regarding the nature of TCP sockets with a highly scalable and distrubuted set of services (this was to be utilised within the BBC so these are genuine concerns to be had for my purposes) and so I decided to do some research.</description>
    </item>
    
    <item>
      <title>Bash Watchtower</title>
      <link>http://www.integralist.co.uk/posts/bash-watchtower/</link>
      <pubDate>Thu, 03 Mar 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bash-watchtower/</guid>
      <description>Introduction How does it work? Comparison Code Explanation Conclusion  
Introduction This is a quick post to demonstrate how I use a simple Bash shell script to report when web pages are failing (e.g. returning a non-200 HTTP status code). It does this by sending notifications of the URL which returned a non-200 status code into a remote application (in my case Slack; but you could modify the script to suit whatever service you happen to be using).</description>
    </item>
    
    <item>
      <title>RPC Variations in Go</title>
      <link>http://www.integralist.co.uk/posts/rpc-variations-in-go/</link>
      <pubDate>Fri, 19 Feb 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/rpc-variations-in-go/</guid>
      <description>Introduction  Outline Variations Requirements  RPC over HTTP RPC over TCP JSON Calling from Ruby gRPC  
Introduction Let&amp;rsquo;s begin by understanding what an RPC (Remote Procedure Call) actually is:
 RPC is a way of connecting two separate services via a raw TCP socket
 
Outline The fundamental principle behind RPC is to create a service that exposes a function behind that service.
The steps typically look something like:</description>
    </item>
    
    <item>
      <title>Understanding Golang&#39;s Func Type</title>
      <link>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</link>
      <pubDate>Mon, 23 Nov 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</guid>
      <description>Introduction Four ways to skin a cat How does the adapter work? Why is this interesting?  
Introduction Here is some code that demonstrates the typical &amp;lsquo;hello world&amp;rsquo; for a Go based web server:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello %s&amp;quot;, r.URL.Path[1:]) } func main() { http.HandleFunc(&amp;quot;/World&amp;quot;, handler) http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil) }   Note: http://localhost:8080/World will return Hello World</description>
    </item>
    
    <item>
      <title>Multiple SSH Keys for Different GitHub Accounts</title>
      <link>http://www.integralist.co.uk/posts/multiple-ssh-keys-for-different-github-accounts/</link>
      <pubDate>Wed, 18 Nov 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/multiple-ssh-keys-for-different-github-accounts/</guid>
      <description>Introduction The Problem? The Solution Creating a new Key SSH Config Optional Shell Function Alternatives? Another Alternative  
Introduction I recently had an issue with my GitHub set-up which has since prompted me to write this post. The issue I had was dealing with multiple GitHub accounts via SSH on a single laptop.
So I have a GitHub account under the username Integralist. This is a personal account, and up until recently I was also using it to access my work&amp;rsquo;s private repos (BBC and BBC-News).</description>
    </item>
    
    <item>
      <title>HTTP/2</title>
      <link>http://www.integralist.co.uk/posts/http2/</link>
      <pubDate>Tue, 20 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/http2/</guid>
      <description>Introduction Persistent Connections Multiplexing Compression Prioritization SSL/TLS Server Push Implementations  Nginx Go  References  
Introduction This is a super quick post for demonstrating how to utilise the new HTTP/2 protocol. If you&amp;rsquo;re unfamiliar with it, then let me spend a brief few moments discussing some of the highlights:
 Single, persistent connection Multiplexing Header compression Prioritization Encryption Server Push  If none of these features make sense, then allow me to clarify further&amp;hellip;</description>
    </item>
    
    <item>
      <title>Building Systems With Make</title>
      <link>http://www.integralist.co.uk/posts/building-systems-with-make/</link>
      <pubDate>Wed, 07 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/building-systems-with-make/</guid>
      <description>Introduction Simple Example Terminology Prerequisites How Make Decides What To Do Automatic variables Commands Targets As Prerequisites Accessing Targets Parsing Targets And Prerequisites Dynamic Targets Dereferencing (Variables and Macros) Functions  Filter Shell Eval Files  User-Defined Functions Conventions Revisiting The For Loop Example Includes Conclusion  
Introduction Most web developers use a build tool of some sort nowadays. I’m not refering to continuous integration software like Jenkins CI (a very popular build system), but the lower-level software it uses to actually acquire dependencies and construct your applications with.</description>
    </item>
    
    <item>
      <title>Client Cert Authentication</title>
      <link>http://www.integralist.co.uk/posts/client-cert-authentication/</link>
      <pubDate>Sat, 03 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/client-cert-authentication/</guid>
      <description>Introduction Directory Structure Configuration Building Running Verifying Revocation References Conclusion  
Introduction The purpose of this post is to demonstrate how to configure nginx to use client certificates for authenticated access to your back-end service (in this example: a Ruby/Sinatra application).
 Note: the focus of this post isn&amp;rsquo;t about Ruby/Sinatra so don&amp;rsquo;t worry if your back-end service is built with another programming language
 I won&amp;rsquo;t be going into the details of how most of it was set-up, as the majority of this was already documented in a previous blog post here: Setting up nginx with Docker so I recommend reading through that first if you&amp;rsquo;re new to Docker and nginx.</description>
    </item>
    
    <item>
      <title>DNS 101</title>
      <link>http://www.integralist.co.uk/posts/dns-101/</link>
      <pubDate>Wed, 30 Sep 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/dns-101/</guid>
      <description>DNS (Domain Name System) Lookup Process  Resolver Root Name Server(s) TLD Name Server(s) SLD Name Server(s)  Tree Hierarchy DNS Structure Authority Zones Name Servers Commands  whois dig  Flags option: nostats option: nocomments option: trace Other options  host nslookup  Record Types  NS A CNAME MX SOA SRV PTR TXT  TTL (Time to Live)  Local Caching  References Conclusion</description>
    </item>
    
    <item>
      <title>Security basics with GPG, OpenSSH, OpenSSL and Keybase</title>
      <link>http://www.integralist.co.uk/posts/security-basics/</link>
      <pubDate>Tue, 25 Aug 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/security-basics/</guid>
      <description>Introduction What are keys and how do they work? Understanding PKI OpenSSL vs OpenSSH What is GPG? Creating your own keys  OpenSSH OpenSSL GPG  Multiple Keys?   How to encrypt data using GPG, OpenSSL and Keybase  GPG encryption  Asymmetrical encryption Symmetrical encryption Key Signing Digital Signatures Revoking Keys  OpenSSL encryption Keybase Which should I use?  Creating, self-signing, issuing and revoking certificates Conclusion   UPDATE: for those short on time, read the following Introduction, What are keys and how do they work?</description>
    </item>
    
    <item>
      <title>Setting Up Nginx With Docker</title>
      <link>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</link>
      <pubDate>Tue, 04 Aug 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</guid>
      <description>Introduction Just give me the code Setting up nginx Setting up the Ruby application Linking your app to nginx Conclusion  
Introduction I wanted to learn about how to use the popular proxy server nginx for handling &amp;ldquo;reverse proxy&amp;rdquo; duties on a Ruby project I was working on. So I decided the easiest thing to do in order to play around with nginx (as I work on a MacBook Pro laptop), would be to install and run it (and my back-end application) within Docker containers.</description>
    </item>
    
    <item>
      <title>Designing for Simplicity</title>
      <link>http://www.integralist.co.uk/posts/designing-for-simplicity/</link>
      <pubDate>Mon, 30 Mar 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/designing-for-simplicity/</guid>
      <description>This post was originally written for David Walsh back in 2015. I&amp;rsquo;ve since decided to reproduce it here for my own records - Integralist: August, 2017.
 Before we get started, it&amp;rsquo;s worth me spending a brief moment introducing myself to you. My name is Mark (or @integralist if Twitter happens to be your communication tool of choice) and I currently work for BBC News in London England as a principal engineer/tech lead; and I&amp;rsquo;m also the author of &amp;ldquo;Pro Vim&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Thread Safe Concurrency</title>
      <link>http://www.integralist.co.uk/posts/thread-safe-concurrency/</link>
      <pubDate>Sun, 28 Dec 2014 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/thread-safe-concurrency/</guid>
      <description>Introduction  Shared Memory Message Passing  Various options Mutexes/Semaphores  Atomic operations  STM  Clojure example Quick Clojure Concurrency Detour JRuby example  Actors  Transactions and Actors? Actors in Clojure Differences between Agents and Erlang Actors Limitations  CSP Threads  CPU vs I/O Calculating the number of Threads Even workload distribution  Conclusion  
Introduction Concurrency is a difficult concept. Regardless of programming language or idiom that you use, the practice of programming a &amp;ldquo;thread-safe&amp;rdquo; application can be harder than you think.</description>
    </item>
    
    <item>
      <title>GitHub Workflow</title>
      <link>http://www.integralist.co.uk/posts/github-workflow/</link>
      <pubDate>Sat, 27 Dec 2014 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/github-workflow/</guid>
      <description>Introduction Rebase before merge Example (Bonus) Modifying content within an interactive rebase  
Introduction This is a quick post to cover a GitHub workflow that is utilised by our specific team (Frameworks) here at BBC News. The basis of our workflow is this:
 Open a GitHub PR (Pull Request) by creating a new feature branch from master Make feature specific changes and request a code review If given a &amp;ldquo;thumbs up&amp;rdquo;, this means the PR author is allowed to handle merging the PR The merge process requires a set of sub steps (see below)</description>
    </item>
    
    <item>
      <title>Functional Recursive JavaScript Programming</title>
      <link>http://www.integralist.co.uk/posts/functional-recursive-javascript-programming/</link>
      <pubDate>Sat, 26 Apr 2014 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/functional-recursive-javascript-programming/</guid>
      <description>Introduction The problem Tail Call Optimisation The solution Trampolining A more advanced solution Explanation Conclusion  
Introduction This post isn&amp;rsquo;t about Functional Programming per se, as there are many parts to pure FP (seen in Lisp, Clojure, Haskell etc) which we can&amp;rsquo;t achieve completely in the JavaScript language (for example, implementing fundamental principles of FP such as &amp;ldquo;immutable data&amp;rdquo; is very difficult in a language designed around allowing data structures to be mutable.</description>
    </item>
    
    <item>
      <title>Refactoring Techniques</title>
      <link>http://www.integralist.co.uk/posts/refactoring-techniques/</link>
      <pubDate>Sun, 10 Nov 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/refactoring-techniques/</guid>
      <description>Introduction Languages Why refactor? When should refactor? Tests Refactoring Techniques  Rename Method Introduce Explaining Variable Inline Temp Split Temp Variable Replace Temp With Query Replace Temp With Chain Extract Method Inline Method Move Method Replace Method With Method Object Replace Loop With Collection Closure Method Pull Up Method Form Template Method Extract Surrounding Method Self Encapsulate Field Introduce Named Parameter Remove Redundancy Dynamic Method Definition Extract Class Hide Delegate Replace Array with Object Replace Conditional with Polymorphism Decompose Conditional Introduce Null Object  Conclusion</description>
    </item>
    
    <item>
      <title>MVCP: Model, View, Controller, Presenter</title>
      <link>http://www.integralist.co.uk/posts/mvcp/</link>
      <pubDate>Tue, 22 Oct 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/mvcp/</guid>
      <description>Introduction  Model View Controller  Mixed definitions  God Controller Problems Skinny Controller  Presenters?  What problem are Presenters trying to solve? How do they work?  Code Example  Controller View Presenter  Conclusion  
Introduction Model, View, Controller (MVC). This is a pretty standard architectural pattern and has been in use when developing software since the early 1970&amp;rsquo;s.
The basic principle of the pattern is to separate the different areas of logic from your application into distinct compartments.</description>
    </item>
    
    <item>
      <title>Basic Shell Scripting</title>
      <link>http://www.integralist.co.uk/posts/basic-shell-scripting/</link>
      <pubDate>Tue, 01 Oct 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/basic-shell-scripting/</guid>
      <description>Introduction Basics  What directory am I currently in? How can I see what&amp;rsquo;s in this directory? Moving around Displaying content of a file Copy a file Move a file Create a file Rename a file Delete a file Delete a directory Create a directory  Find (searching for files)  Finding files over a certain size  Grep (Searching for patterns) Sed (Find and Replace) Awk (Looping Logic) Piping I/O  Input and Output Redirection Piping Piping examples Sequences and Parallelism  Processes  Viewing processes Moving processes between the fore/background  Miscellaneous Commands  tee dig ps xargs cut tr du !</description>
    </item>
    
    <item>
      <title>Clean Coder</title>
      <link>http://www.integralist.co.uk/posts/clean-coder/</link>
      <pubDate>Sat, 01 Jun 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/clean-coder/</guid>
      <description>Who is Robert C. Martin? What&amp;rsquo;s it all about? Take responsibility Work ethic Know your field Stay current Collaborate Mentoring Know your domain Identify with your employer Learn to say no Rules and principles for coding Acceptance Tests Managing time  Meetings Scrum Sprint Planning Sprint Retro Discussions Code  Estimations Pressure Conclusion  Who is Robert C. Martin? Robert C. Martin is a legend in the development industry.</description>
    </item>
    
    <item>
      <title>Message Passing in Object Oriented Code</title>
      <link>http://www.integralist.co.uk/posts/message-passing-in-object-oriented-code/</link>
      <pubDate>Sun, 31 Mar 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/message-passing-in-object-oriented-code/</guid>
      <description>Introduction Quick example The Proxy Design Pattern How Ruby handles method calls Implementing method_missing Conclusion  
Introduction In my previous post I quoted the following description of object-oriented design…
 Object-Oriented Design is about the messages that get sent between objects and not the objects themselves.
 The reason I felt this quote was important for good code design was because it helped focus our attention on improving our object&amp;rsquo;s interfaces.</description>
    </item>
    
    <item>
      <title>Object Oriented Design</title>
      <link>http://www.integralist.co.uk/posts/object-oriented-design/</link>
      <pubDate>Tue, 12 Feb 2013 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/object-oriented-design/</guid>
      <description>Quick Summary Introduction Objects Class Analysis Dependencies Flexible Interfaces Duck Typing Inheritance Inheritance vs Composition Further good rules of development from Sandi Metz Summary  
Quick Summary Here is a short summary for those of you who prefer to see a quick bullet-point list of items covered&amp;hellip;
 Decouple your code (we discuss this in more detail below) Describe your class to see if it does too much</description>
    </item>
    
    <item>
      <title>Git Tips</title>
      <link>http://www.integralist.co.uk/posts/git-tips/</link>
      <pubDate>Sun, 16 Dec 2012 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/git-tips/</guid>
      <description>I thought I would get down in a blog post the different Git commands and tips that I find really useful, because every now and then it seems I need to refer back to these notes (which up until this point have been in a txt file in my Dropbox) if I&amp;rsquo;ve not used a particular command in a while.
Hopefully you&amp;rsquo;ll find them useful too.
 Show where Git is installed Show the Git version installed Update your global user details Set-up a global ignore file Adding all files (inc.</description>
    </item>
    
    <item>
      <title>JavaScript 101</title>
      <link>http://www.integralist.co.uk/posts/javascript-101/</link>
      <pubDate>Sat, 24 Nov 2012 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/javascript-101/</guid>
      <description>Introduction What is JavaScript Terminology Global Object Variables Types Objects Arrays Conditional Statements Coercion Functions Code Reuse (inheritance) Conclusion  
Introduction I&amp;rsquo;ve written this very brief guide to JavaScript just as an aid for people new to the language and who need a basic starting point to see what the syntax looks like and to get a feeling for some of its features.
This article&amp;rsquo;s main purpose is to give readers new to the language a glimpse of the JavaScript environment and to hopefully spur them onto further reading/learning.</description>
    </item>
    
    <item>
      <title>Host Methods vs Native Methods</title>
      <link>http://www.integralist.co.uk/posts/host-methods-vs-native-methods/</link>
      <pubDate>Sun, 22 Apr 2012 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/host-methods-vs-native-methods/</guid>
      <description>Introduction What they are? How to detect them? When is it OK to modify them?  
Introduction This was intended as a short and overly simplified post about Host methods and Native methods.

What they are? Native methods are built-in functions provided by the ECMAScript core specification. So things like Object methods (e.g. Object.create), Array methods (e.g. Array#forEach) etc.
Host methods are functions provided by the host environment (most of the time when working in web development the host environment will be the user’s web browser).</description>
    </item>
    
    <item>
      <title>Observability, Monitoring, Instrumentation</title>
      <link>http://www.integralist.co.uk/posts/observability-monitoring-instrumentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/observability-monitoring-instrumentation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Practical Monitoring</title>
      <link>http://www.integralist.co.uk/posts/practical-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/practical-monitoring/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>