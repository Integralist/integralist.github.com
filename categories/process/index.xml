<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Process on integralist</title>
    <link>http://www.integralist.co.uk/categories/process/</link>
    <description>Recent content in Process on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 22 Aug 2016 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/categories/process/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub Pull Request Formatting</title>
      <link>http://www.integralist.co.uk/posts/github-pull-request-formatting/</link>
      <pubDate>Mon, 22 Aug 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/github-pull-request-formatting/</guid>
      <description>Introduction Why Size Process Communication Merge Strategies Conclusion  
Introduction What makes a good Pull Request?
The answer will depend on your team, and to a certain extent your organisation.
Currently I work at BuzzFeed, and prior to that I worked at the BBC.
Both have a large number of engineers and teams, but due to different organisational structures they have differing opinions on what constitutes a good pull request format.</description>
    </item>
    
    <item>
      <title>Git Merge Strategies</title>
      <link>http://www.integralist.co.uk/posts/git-merge-strategies/</link>
      <pubDate>Sun, 15 May 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/git-merge-strategies/</guid>
      <description>Introduction git merge git merge --no-ff --edit  git reset Force the merge commit git branch --contains Losing useful history  git merge --squash git rebase git rebase --interactive git rebase --onto git format-patch Conclusion  
Introduction Imagine I have a master branch with one commit:
75eb1cb - (origin/master) README  This is a single README.md file with the following content:
- A: 1  Now imagine I have a branch from master called feat/foo and in that branch I&amp;rsquo;ve made 3 additional commits:</description>
    </item>
    
    <item>
      <title>Client Cert Authentication</title>
      <link>http://www.integralist.co.uk/posts/client-cert-authentication/</link>
      <pubDate>Sat, 03 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/client-cert-authentication/</guid>
      <description>Introduction Directory Structure Configuration Building Running Verifying Revocation References Conclusion  
Introduction The purpose of this post is to demonstrate how to configure nginx to use client certificates for authenticated access to your back-end service (in this example: a Ruby/Sinatra application).
 Note: the focus of this post isn&amp;rsquo;t about Ruby/Sinatra so don&amp;rsquo;t worry if your back-end service is built with another programming language
 I won&amp;rsquo;t be going into the details of how most of it was set-up, as the majority of this was already documented in a previous blog post here: Setting up nginx with Docker so I recommend reading through that first if you&amp;rsquo;re new to Docker and nginx.</description>
    </item>
    
    <item>
      <title>DNS 101</title>
      <link>http://www.integralist.co.uk/posts/dns-101/</link>
      <pubDate>Wed, 30 Sep 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/dns-101/</guid>
      <description>DNS (Domain Name System) Lookup Process  Resolver Root Name Server(s) TLD Name Server(s) SLD Name Server(s)  Tree Hierarchy DNS Structure Authority Zones Name Servers Commands  whois dig  Flags option: nostats option: nocomments option: trace Other options  host nslookup  Record Types  NS A CNAME MX SOA SRV PTR TXT  TTL (Time to Live)  Local Caching  References Conclusion</description>
    </item>
    
  </channel>
</rss>