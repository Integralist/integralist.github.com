<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on integralist</title>
    <link>http://www.integralist.co.uk/categories/code/</link>
    <description>Recent content in Code on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 29 Mar 2017 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dev Environments Within Docker Containers</title>
      <link>http://www.integralist.co.uk/posts/dev-environments-within-docker-containers/</link>
      <pubDate>Wed, 29 Mar 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/dev-environments-within-docker-containers/</guid>
      <description>Introduction Python Go Mounting Volumes  
Introduction You&amp;rsquo;re a software engineer with a new laptop.
You&amp;rsquo;re going to be writing code in multiple languages.
You&amp;rsquo;re going to have projects of varying dependencies.
But you want to avoid the issues you&amp;rsquo;ve had in the past:
 Messy installations of lots of different software packages. Clogging up your system with programming language version managers.  You decide to use Docker.</description>
    </item>
    
    <item>
      <title>Key Architecture</title>
      <link>http://www.integralist.co.uk/posts/key-architecture/</link>
      <pubDate>Sat, 10 Dec 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/key-architecture/</guid>
      <description>Introduction Visual Breakdown Vulnerabilities? Conclusion  
Introduction Just a quick post to cover the key architecture I&amp;rsquo;m using currently. I&amp;rsquo;m very interested to know how others are doing things in the hope that I can improve the security of my setup.
 Note: I&amp;rsquo;m not a security paranoia nut, so I&amp;rsquo;m not looking for the most concrete solution. But definitely want to be sure I&amp;rsquo;m not missing anything obvious either</description>
    </item>
    
    <item>
      <title>Hitchikers Guide to Go</title>
      <link>http://www.integralist.co.uk/posts/hitchikers-guide-to-go/</link>
      <pubDate>Fri, 02 Dec 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/hitchikers-guide-to-go/</guid>
      <description>Introduction Private Repo Access Build and Compilation Dependency Information Dependency Management Documentation Testing Logging Godo Import Race Conditions New vs Make Custom Types Function Types Enumerator IOTA Struct: Var vs Type Embedded Structs Reference vs Value See all methods on &amp;lt;Type&amp;gt; Convert Struct into JSON Pretty Printing JSON String Convert Struct into YAML Sorting Structs Read Users Input HTTP Middleware Sessions HTTPS TLS Request HTTP GET Web Page Custom HTTP Request Methods Pointers Type Assertion Line Counting Reading File in Chunks Time Starting and Stopping things with Channels Channel Pipelines Templating Error handling Socket Programming Comparing Maps Zip File Contents Shell Commands New Instance Idiom JSON Connection Draining</description>
    </item>
    
    <item>
      <title>Concepts From the C Programming Language</title>
      <link>http://www.integralist.co.uk/posts/concepts-from-the-c-programming-language/</link>
      <pubDate>Mon, 28 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/concepts-from-the-c-programming-language/</guid>
      <description>Introduction Compilation  Compilers C11 safe functions  Hello World Constants vs Directives Quotations Char Type Null Terminator Pointers Arrays Enumerators Memory Allocation with different Types Reallocating Memory Function Prototypes Conclusion  
Introduction I decided recently to read a book on the C programming language. The idea was to learn some more low-level concepts that other higher-level languages were abstracting away from me.
This write up is the result of some of those learnings.</description>
    </item>
    
    <item>
      <title>Syscalls and C</title>
      <link>http://www.integralist.co.uk/posts/syscalls-and-c/</link>
      <pubDate>Fri, 18 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/syscalls-and-c/</guid>
      <description>Syscalls and C This post is aimed at explaining the difference between a system call (provided by the Linux kernal) and a wrapper function that has a similar name within one of the C standard libraries.
I have no formal Computer Science (CS) background, I started programming in 1999 and only from 2016 am I starting to learn the C programming language in order to help give me a deeper knowledge of how *nix systems work and other core CS concepts.</description>
    </item>
    
    <item>
      <title>Bits and Bytes</title>
      <link>http://www.integralist.co.uk/posts/bits-and-bytes/</link>
      <pubDate>Wed, 16 Nov 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bits-and-bytes/</guid>
      <description>Introduction Bit Byte RAM Bit and RAM Visualisation Bits and Numbers IPs Base Numbers  Convert Base-10 into Base-2&amp;frasl;8 Convert Base-10 into Base-16 Convert Any Base to Base-10  CIDR Conclusion  
Introduction So this is a bit of a random journey through some different computer based subjects. Things that I felt I should try to better understand. Some of it will be very basic, but hopefully it&amp;rsquo;ll be useful to those who are new to tech, and are interested in learning these things (or old dogs like me who should know better).</description>
    </item>
    
    <item>
      <title>Terminal Password Manager</title>
      <link>http://www.integralist.co.uk/posts/terminal-password-manager/</link>
      <pubDate>Wed, 19 Oct 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-password-manager/</guid>
      <description>Introduction Installation Example Usage Exporting Data Synchronisation Mobile and GUI Applications MultiFactor Authentication Conclusion  
Introduction I&amp;rsquo;m guessing that you have an app like 1Password or KeePassX to manage your passwords and other login credentials and you&amp;rsquo;re now looking for a cheaper alternative, and also one that doesn&amp;rsquo;t rely on a GUI (although as you&amp;rsquo;ll see that&amp;rsquo;s still possible).
If so, then &amp;ldquo;Pass&amp;rdquo; might be something of interest to you as it offers you the ability to securely store information via the command line interface (e.</description>
    </item>
    
    <item>
      <title>Terminal Debugging Utilities</title>
      <link>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</link>
      <pubDate>Mon, 12 Sep 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/terminal-debugging-utilities/</guid>
      <description>Introduction Prerequisites  TCP and HTTP OSI Model  Utilities  top: check running processes for cpu and memory utilisation ps: see what processes are running strace: monitor interactions between processes lsof: list of open files netstat: monitoring network traffic ifconfig: configure or review your network interfaces iftop: monitors network traffic and displays table of bandwidth usage iptraf: monitoring network traffic (more visual than netstat, not as detailed) tcpdump: network packet sniffer wireshark: network packet sniffer and analyser (gui) tshark: network packet sniffer and analyser telnet: utility for communicating with another host  Honorable mentions Conclusion</description>
    </item>
    
    <item>
      <title>gRPC for Beginners</title>
      <link>http://www.integralist.co.uk/posts/grpc-for-beginners/</link>
      <pubDate>Mon, 11 Apr 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/grpc-for-beginners/</guid>
      <description>Introduction Install gRPC Install Proto Buffer Compiler Hello World Proto Definition Ruby Example Go Example Conclusion  
Introduction I started designing a new microservice that I wanted to write in Go. The service was to be a JSON RPC service over TCP, and the expected consumer servicer I would build using Ruby.
I had some initial concerns regarding the nature of TCP sockets with a highly scalable and distrubuted set of services (this was to be utilised within the BBC so these are genuine concerns to be had for my purposes) and so I decided to do some research.</description>
    </item>
    
    <item>
      <title>Bash Watchtower</title>
      <link>http://www.integralist.co.uk/posts/bash-watchtower/</link>
      <pubDate>Thu, 03 Mar 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/bash-watchtower/</guid>
      <description>Introduction How does it work? Comparison Code Explanation Conclusion  
Introduction This is a quick post to demonstrate how I use a simple Bash shell script to report when web pages are failing (e.g. returning a non-200 HTTP status code). It does this by sending notifications of the URL which returned a non-200 status code into a remote application (in my case Slack; but you could modify the script to suit whatever service you happen to be using).</description>
    </item>
    
    <item>
      <title>RPC Variations in Go</title>
      <link>http://www.integralist.co.uk/posts/rpc-variations-in-go/</link>
      <pubDate>Fri, 19 Feb 2016 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/rpc-variations-in-go/</guid>
      <description>Introduction  Outline Variations Requirements  RPC over HTTP RPC over TCP JSON Calling from Ruby gRPC  
Introduction Let&amp;rsquo;s begin by understanding what an RPC (Remote Procedure Call) actually is:
 RPC is a way of connecting two separate services via a raw TCP socket
 
Outline The fundamental principle behind RPC is to create a service that exposes a function behind that service.
The steps typically look something like:</description>
    </item>
    
    <item>
      <title>Understanding Golang&#39;s Func Type</title>
      <link>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</link>
      <pubDate>Mon, 23 Nov 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/understanding-golangs-func-type/</guid>
      <description>Introduction Four ways to skin a cat How does the adapter work? Why is this interesting?  
Introduction Here is some code that demonstrates the typical &amp;lsquo;hello world&amp;rsquo; for a Go based web server:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello %s&amp;quot;, r.URL.Path[1:]) } func main() { http.HandleFunc(&amp;quot;/World&amp;quot;, handler) http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil) }   Note: http://localhost:8080/World will return Hello World</description>
    </item>
    
    <item>
      <title>HTTP/2</title>
      <link>http://www.integralist.co.uk/posts/http2/</link>
      <pubDate>Tue, 20 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/http2/</guid>
      <description>Introduction Persistent Connections Multiplexing Compression Prioritization SSL/TLS Server Push Implementations  Nginx Go  References  
Introduction This is a super quick post for demonstrating how to utilise the new HTTP/2 protocol. If you&amp;rsquo;re unfamiliar with it, then let me spend a brief few moments discussing some of the highlights:
 Single, persistent connection Multiplexing Header compression Prioritization Encryption Server Push  If none of these features make sense, then allow me to clarify further&amp;hellip;</description>
    </item>
    
    <item>
      <title>Building Systems With Make</title>
      <link>http://www.integralist.co.uk/posts/building-systems-with-make/</link>
      <pubDate>Wed, 07 Oct 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/building-systems-with-make/</guid>
      <description>Introduction Simple Example Terminology Prerequisites How Make Decides What To Do Automatic variables Commands Targets As Prerequisites Accessing Targets Parsing Targets And Prerequisites Dynamic Targets Dereferencing (Variables and Macros) Functions  Filter Shell Eval Files  User-Defined Functions Conventions Revisiting The For Loop Example Includes Conclusion  
Introduction Most web developers use a build tool of some sort nowadays. I’m not refering to continuous integration software like Jenkins CI (a very popular build system), but the lower-level software it uses to actually acquire dependencies and construct your applications with.</description>
    </item>
    
    <item>
      <title>Security basics with GPG, OpenSSH, OpenSSL and Keybase</title>
      <link>http://www.integralist.co.uk/posts/security-basics/</link>
      <pubDate>Tue, 25 Aug 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/security-basics/</guid>
      <description>Introduction What are keys and how do they work? Understanding PKI OpenSSL vs OpenSSH What is GPG? Creating your own keys  OpenSSH OpenSSL GPG  Multiple Keys?   How to encrypt data using GPG, OpenSSL and Keybase  GPG encryption  Asymmetrical encryption Symmetrical encryption Key Signing Digital Signatures Revoking Keys  OpenSSL encryption Keybase Which should I use?  Creating, self-signing, issuing and revoking certificates Conclusion   UPDATE: for those short on time, read the following Introduction, What are keys and how do they work?</description>
    </item>
    
    <item>
      <title>Setting Up Nginx With Docker</title>
      <link>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</link>
      <pubDate>Tue, 04 Aug 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</guid>
      <description>Introduction Just give me the code Setting up nginx Setting up the Ruby application Linking your app to nginx Conclusion  
Introduction I wanted to learn about how to use the popular proxy server nginx for handling &amp;ldquo;reverse proxy&amp;rdquo; duties on a Ruby project I was working on. So I decided the easiest thing to do in order to play around with nginx (as I work on a MacBook Pro laptop), would be to install and run it (and my back-end application) within Docker containers.</description>
    </item>
    
    <item>
      <title>Designing for Simplicity</title>
      <link>http://www.integralist.co.uk/posts/designing-for-simplicity/</link>
      <pubDate>Mon, 30 Mar 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/designing-for-simplicity/</guid>
      <description>This post was originally written for David Walsh back in 2015. I&amp;rsquo;ve since decided to reproduce it here for my own records - Integralist: August, 2017.
 Before we get started, it&amp;rsquo;s worth me spending a brief moment introducing myself to you. My name is Mark (or @integralist if Twitter happens to be your communication tool of choice) and I currently work for BBC News in London England as a principal engineer/tech lead; and I&amp;rsquo;m also the author of &amp;ldquo;Pro Vim&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Thread Safe Concurrency</title>
      <link>http://www.integralist.co.uk/posts/thread-safe-concurrency/</link>
      <pubDate>Sun, 28 Dec 2014 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/thread-safe-concurrency/</guid>
      <description>Introduction  Shared Memory Message Passing  Various options Mutexes/Semaphores  Atomic operations  STM  Clojure example Quick Clojure Concurrency Detour JRuby example  Actors  Transactions and Actors? Actors in Clojure Differences between Agents and Erlang Actors Limitations  CSP Threads  CPU vs I/O Calculating the number of Threads Even workload distribution  Conclusion  
Introduction Concurrency is a difficult concept. Regardless of programming language or idiom that you use, the practice of programming a &amp;ldquo;thread-safe&amp;rdquo; application can be harder than you think.</description>
    </item>
    
    <item>
      <title>Functional Recursive JavaScript Programming</title>
      <link>http://www.integralist.co.uk/posts/functional-recursive-javascript-programming/</link>
      <pubDate>Sat, 26 Apr 2014 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/functional-recursive-javascript-programming/</guid>
      <description>Introduction The problem Tail Call Optimisation The solution Trampolining A more advanced solution Explanation Conclusion  
Introduction This post isn&amp;rsquo;t about Functional Programming per se, as there are many parts to pure FP (seen in Lisp, Clojure, Haskell etc) which we can&amp;rsquo;t achieve completely in the JavaScript language (for example, implementing fundamental principles of FP such as &amp;ldquo;immutable data&amp;rdquo; is very difficult in a language designed around allowing data structures to be mutable.</description>
    </item>
    
  </channel>
</rss>