<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on integralist</title>
    <link>http://www.integralist.co.uk/categories/development/</link>
    <description>Recent content in Development on integralist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 02 Nov 2017 13:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.integralist.co.uk/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fastly Varnish</title>
      <link>http://www.integralist.co.uk/posts/fastly-varnish/</link>
      <pubDate>Thu, 02 Nov 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/fastly-varnish/</guid>
      <description>Introduction Varnish Default VCL Fastly Custom VCL Fastly Request Flow Diagram Hit for Pass Serving Stale Conclusion  
Introduction Varnish is an open-source HTTP accelerator.
More concretely it is a web application that acts like a HTTP reverse-proxy.
You place Varnish in front of your application servers (those that are serving HTTP content) and it will cache that content for you. If you want more information on what Varnish cache can do for you, then I recommend reading through their introduction article (and watching the video linked there as well).</description>
    </item>
    
    <item>
      <title>Profiling Go</title>
      <link>http://www.integralist.co.uk/posts/profiling-go/</link>
      <pubDate>Tue, 31 Oct 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/profiling-go/</guid>
      <description>Memory Management Types of Profiling Analysis Steps Base Example ReadMemStats Pprof Trace Conclusion  
Memory Management Before we dive into the techniques and tools available for profiling Go applications, we should first understand a little bit about its memory model as this can help us to understand what it is we’re seeing in relation to memory consumption.
Go’s implementation is a parallel mark-and-sweep garbage collector. In the traditional mark-and-sweep model, the garbage collector would stop the program from running (i.</description>
    </item>
    
    <item>
      <title>Profiling Python</title>
      <link>http://www.integralist.co.uk/posts/profiling-python/</link>
      <pubDate>Tue, 31 Oct 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/profiling-python/</guid>
      <description>Memory Management Types of Profiling Analysis Steps Base Example Timer Built-in module: timeit Built-in module: profiler Line Profiler Basic Memory Profiler Tracemalloc PyFlame (Flame Graphs) Conclusion  
Memory Management Before we dive into the techniques and tools available for profiling Python applications, we should first understand a little bit about its memory model as this can help us to understand what it is we’re seeing in relation to memory consumption.</description>
    </item>
    
    <item>
      <title>Dev Environments Within Docker Containers</title>
      <link>http://www.integralist.co.uk/posts/dev-environments-within-docker-containers/</link>
      <pubDate>Wed, 29 Mar 2017 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/dev-environments-within-docker-containers/</guid>
      <description>Introduction Python Go Mounting Volumes  
Introduction You&amp;rsquo;re a software engineer with a new laptop.
You&amp;rsquo;re going to be writing code in multiple languages.
You&amp;rsquo;re going to have projects of varying dependencies.
But you want to avoid the issues you&amp;rsquo;ve had in the past:
 Messy installations of lots of different software packages. Clogging up your system with programming language version managers.  You decide to use Docker.</description>
    </item>
    
    <item>
      <title>Multiple SSH Keys for Different GitHub Accounts</title>
      <link>http://www.integralist.co.uk/posts/multiple-ssh-keys-for-different-github-accounts/</link>
      <pubDate>Wed, 18 Nov 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/multiple-ssh-keys-for-different-github-accounts/</guid>
      <description>Introduction The Problem? The Solution Creating a new Key SSH Config Optional Shell Function Alternatives? Another Alternative  
Introduction I recently had an issue with my GitHub set-up which has since prompted me to write this post. The issue I had was dealing with multiple GitHub accounts via SSH on a single laptop.
So I have a GitHub account under the username Integralist. This is a personal account, and up until recently I was also using it to access my work&amp;rsquo;s private repos (BBC and BBC-News).</description>
    </item>
    
    <item>
      <title>Setting Up Nginx With Docker</title>
      <link>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</link>
      <pubDate>Tue, 04 Aug 2015 13:00:00 +0100</pubDate>
      
      <guid>http://www.integralist.co.uk/posts/setting-up-nginx-with-docker/</guid>
      <description>Introduction Just give me the code Setting up nginx Setting up the Ruby application Linking your app to nginx Conclusion  
Introduction I wanted to learn about how to use the popular proxy server nginx for handling &amp;ldquo;reverse proxy&amp;rdquo; duties on a Ruby project I was working on. So I decided the easiest thing to do in order to play around with nginx (as I work on a MacBook Pro laptop), would be to install and run it (and my back-end application) within Docker containers.</description>
    </item>
    
  </channel>
</rss>